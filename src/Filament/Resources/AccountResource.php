<?php

namespace TomatoPHP\FilamentEmployees\Filament\Resources;

use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;
use TomatoPHP\FilamentAccounts\Components\AccountColumn;
use TomatoPHP\FilamentEmployees\Filament\Resources\AccountResource\Pages;
use TomatoPHP\FilamentEmployees\Filament\Resources\AccountResource\RelationManagers;
use App\Models\Account;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use TomatoPHP\FilamentEmployees\Models\AttendanceShift;
use TomatoPHP\FilamentTypes\Models\Type;

class AccountResource extends Resource
{
    protected static ?string $model = Account::class;

    public static function getModel(): string
    {
        return config('filament-accounts.model'); // TODO: Change the autogenerated stub
    }

    public static function getNavigationGroup(): ?string
    {
        return "HRMS";
    }

    public static function getPluralLabel(): ?string
    {
        return "Employees";
    }

    public static function getLabel(): ?string
    {
        return "Employee";
    }

    public static function getNavigationLabel(): string
    {
        return "Employees";
    }


    protected static ?string $navigationIcon = 'heroicon-o-user-circle';

    public static function form(Form $form): Form
    {
        return $form
            ->schema(fn($record) => $record ? [
                Forms\Components\Grid::make([
                    'md' => 12,
                    'sm' => 1
                ])
                    ->schema([
                        Forms\Components\Grid::make()
                            ->schema([
                                Forms\Components\Section::make('Main Info')
                                    ->schema([
                                        Forms\Components\SpatieMediaLibraryFileUpload::make('avatar')
                                            ->collection('avatar')
                                            ->columnSpan(2)
                                            ->avatar()
                                            ->image()
                                            ->alignCenter()
                                            ->hiddenLabel()
                                            ->label(trans('filament-accounts::messages.accounts.coulmns.avatar')),
                                        Forms\Components\TextInput::make('name')
                                            ->columnSpanFull()
                                            ->maxLength(255),
                                        Forms\Components\TextInput::make('email')
                                            ->email()
                                            ->afterStateUpdated(function (Forms\Set $set, Forms\Get $get){
                                                $set('username', $get('email'));
                                            })
                                            ->lazy()
                                            ->unique('accounts', 'email', ignorable: fn($record) => $record)
                                            ->maxLength(255),
                                        Forms\Components\Hidden::make('username'),
                                        Forms\Components\Hidden::make('type')->default('employee'),
                                        Forms\Components\TextInput::make('phone')
                                            ->tel()
                                            ->maxLength(255),
                                        Forms\Components\Textarea::make('address')
                                            ->columnSpanFull(),
                                    ])
                                    ->columns(2),
                                Forms\Components\Section::make('National Info')
                                    ->schema([
                                        Forms\Components\TextInput::make('first_name'),
                                        Forms\Components\TextInput::make('middle_name'),
                                        Forms\Components\TextInput::make('last_name'),
                                        Forms\Components\TextInput::make('position')->columnSpanFull(),
                                        Forms\Components\TextInput::make('nationality'),
                                        Forms\Components\Select::make('national_id_type')
                                            ->searchable()
                                            ->options([
                                                'id' => 'ID',
                                                'passport' => 'Passport',
                                                'visa' => 'Visa',
                                            ])
                                            ->default('id'),
                                        Forms\Components\TextInput::make('national_id')
                                            ->numeric(),
                                        Forms\Components\DatePicker::make('brithday')->date(),
                                        Forms\Components\Select::make('geneder')
                                            ->options([
                                                "male" => "Male",
                                                "female" => "Female"
                                            ]),

                                        Forms\Components\TextInput::make('vacations')
                                            ->numeric()
                                            ->default(0),
                                        Forms\Components\Datepicker::make('contract_start'),
                                        Forms\Components\Datepicker::make('contract_end'),
                                        Forms\Components\Select::make('status')
                                            ->options([
                                                'active' => 'Active',
                                                'inactive' => 'Inactive',
                                                'suspended' => 'Suspended',
                                                'terminated' => 'Terminated',
                                            ]),
                                    ])->columns(3),
                                Forms\Components\Section::make('Education')
                                    ->schema([
                                        Forms\Components\Toggle::make('has_education')
                                            ->live()
                                            ->columnSpanFull()
                                            ->default(false),
                                        Forms\Components\Select::make('education_type')
                                            ->default('university')
                                            ->options([
                                                'school' => 'School',
                                                'university' => 'University',
                                                'college' => 'College',
                                            ])
                                            ->visible(fn(Forms\Get $get) => $get('has_education')),
                                        Forms\Components\TextInput::make('university')
                                            ->visible(fn(Forms\Get $get) => $get('has_education')),
                                        Forms\Components\TextInput::make('college')
                                            ->visible(fn(Forms\Get $get) => $get('has_education')),
                                        Forms\Components\TextInput::make('college_department')
                                            ->visible(fn(Forms\Get $get) => $get('has_education')),
                                    ])->columns(2),
                                Forms\Components\Section::make('CV')
                                    ->schema([
                                        Forms\Components\Toggle::make('has_links')
                                            ->live()
                                            ->default(false),
                                        Forms\Components\Repeater::make('links')
                                            ->visible(fn(Forms\Get $get) => $get('has_links'))
                                            ->schema([
                                                Forms\Components\TextInput::make('name'),
                                                Forms\Components\TextInput::make('link'),
                                            ]),
                                    ]),
                            ])
                            ->columnSpan(8),
                        Forms\Components\Grid::make()
                            ->schema([
                                Forms\Components\Section::make('Auth')
                                    ->schema([
                                        Forms\Components\Toggle::make('is_active')
                                            ->required(),
                                        Forms\Components\Toggle::make('is_login')
                                            ->default(false)
                                            ->live(),
                                        Forms\Components\TextInput::make('password')
                                            ->confirmed()
                                            ->hidden(fn(Forms\Get $get) => !$get('is_login'))
                                            ->rule(Password::default())
                                            ->dehydrateStateUsing(fn ($state) => Hash::make($state))
                                            ->same('password_confirmation')
                                            ->revealable(filament()->arePasswordsRevealable())
                                            ->password()
                                            ->maxLength(255),
                                        Forms\Components\TextInput::make('password_confirmation')
                                            ->hidden(fn(Forms\Get $get) => !$get('is_login'))
                                            ->password()
                                            ->revealable(filament()->arePasswordsRevealable())
                                            ->required()
                                            ->dehydrated(false),
                                    ]),
                                Forms\Components\Section::make('Attendance')
                                    ->schema([
                                        Forms\Components\Select::make('department')
                                            ->label('Department')
                                            ->searchable()
                                            ->live()
                                            ->preload()
                                            ->options(Type::query()->where('for', 'employees')->where('type', 'departments')->pluck('name', 'key')->toArray())
                                            ->nullable(),
                                        Forms\Components\Select::make('attendance_shift_id')
                                            ->disabled(fn(Forms\Get $get) => !$get('department'))
                                            ->label('Attendance Shift')
                                            ->searchable()
                                            ->options(fn(Forms\Get $get) => AttendanceShift::query()->where('department', $get('department'))->pluck('name', 'id')->toArray())
                                            ->nullable(),
                                    ]),
                                Forms\Components\Section::make('Salary')
                                    ->schema([
                                        Forms\Components\TextInput::make('salary')->numeric(),
                                        Forms\Components\TextInput::make('salary_subscription')->numeric(),
                                        Forms\Components\TextInput::make('salary_tax')->numeric(),
                                        Forms\Components\Select::make('salary_period')
                                            ->options([
                                                'hour' => 'Hour',
                                                'day' => 'Day',
                                                'week' => 'Week',
                                                'month' => 'Month',
                                                'year' => 'Year',
                                            ]),
                                    ]),
                                Forms\Components\Section::make('Bank')
                                    ->schema([
                                        Forms\Components\Toggle::make('has_bank_account')
                                            ->live()
                                            ->default(false),
                                        Forms\Components\TextInput::make('bank_name')
                                            ->visible(fn(Forms\Get $get) => $get('has_bank_account')),
                                        Forms\Components\TextInput::make('bank_branch')
                                            ->visible(fn(Forms\Get $get) => $get('has_bank_account')),
                                        Forms\Components\TextInput::make('bank_iban')
                                            ->visible(fn(Forms\Get $get) => $get('has_bank_account')),
                                        Forms\Components\TextInput::make('bank_swift')
                                            ->visible(fn(Forms\Get $get) => $get('has_bank_account')),
                                        Forms\Components\TextInput::make('bank_account')
                                            ->visible(fn(Forms\Get $get) => $get('has_bank_account')),
                                    ]),
                                Forms\Components\Section::make('Insurance')
                                    ->schema([
                                        Forms\Components\Toggle::make('has_insurance')
                                            ->live()
                                            ->default(false),
                                        Forms\Components\TextInput::make('insurance_number')
                                            ->visible(fn(Forms\Get $get) => $get('has_insurance')),
                                        Forms\Components\Toggle::make('has_medical_insurance')
                                            ->live()
                                            ->default(false),
                                        Forms\Components\TextInput::make('medical_insurance_company')
                                            ->visible(fn(Forms\Get $get) => $get('has_medical_insurance')),
                                        Forms\Components\TextInput::make('medical_insurance_number')
                                            ->visible(fn(Forms\Get $get) => $get('has_medical_insurance')),
                                        Forms\Components\Datepicker::make('medical_insurance_start_at')
                                            ->visible(fn(Forms\Get $get) => $get('has_medical_insurance')),
                                        Forms\Components\Datepicker::make('medical_insurance_end_at')
                                            ->visible(fn(Forms\Get $get) => $get('has_medical_insurance')),
                                    ]),

                            ])
                            ->columnSpan(4),
                    ])

            ] : [
                Forms\Components\SpatieMediaLibraryFileUpload::make('avatar')
                    ->collection('avatar')
                    ->columnSpan(2)
                    ->avatar()
                    ->image()
                    ->alignCenter()
                    ->hiddenLabel()
                    ->label(trans('filament-accounts::messages.accounts.coulmns.avatar')),
                Forms\Components\TextInput::make('name')
                    ->columnSpanFull()
                    ->maxLength(255),
                Forms\Components\TextInput::make('email')
                    ->email()
                    ->afterStateUpdated(function (Forms\Set $set, Forms\Get $get){
                        $set('username', $get('email'));
                    })
                    ->lazy()
                    ->unique('accounts', 'email', ignorable: fn($record) => $record)
                    ->maxLength(255),
                Forms\Components\Hidden::make('username'),
                Forms\Components\Hidden::make('type')->default('employee'),
                Forms\Components\TextInput::make('phone')
                    ->tel()
                    ->maxLength(255),
                Forms\Components\Textarea::make('address')
                    ->columnSpanFull(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->modifyQueryUsing(function (Builder $query) {
                $query->where('type', 'employee');
            })
            ->columns([
                AccountColumn::make('id')
                    ->label(trans('filament-accounts::messages.accounts.coulmns.id')),
                Tables\Columns\TextColumn::make('name')
                    ->label(trans('filament-accounts::messages.accounts.coulmns.name'))
                    ->toggleable()
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('email')
                    ->label(trans('filament-accounts::messages.accounts.coulmns.email'))
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('phone')
                    ->label(trans('filament-accounts::messages.accounts.coulmns.phone'))
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->sortable()
                    ->searchable(),
                Tables\Columns\IconColumn::make('is_login')
                    ->label(trans('filament-accounts::messages.accounts.coulmns.is_login'))
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->sortable()
                    ->boolean(),
                Tables\Columns\IconColumn::make('is_active')
                    ->label(trans('filament-accounts::messages.accounts.coulmns.is_active'))
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->sortable()
                    ->boolean(),
                Tables\Columns\TextColumn::make('deleted_at')
                    ->sortable()
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('created_at')
                    ->sortable()
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->sortable()
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            RelationManagers\EmployeeAttendanceRelation::class,
            RelationManagers\EmployeePaymentRelation::class,
            RelationManagers\EmployeeRequestRelation::class,
            RelationManagers\EmployeePayrollRelation::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListAccounts::route('/'),
            'edit' => Pages\EditAccount::route('/{record}/edit'),
        ];
    }
}
